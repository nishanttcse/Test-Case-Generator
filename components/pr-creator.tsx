"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { Badge } from "@/components/ui/badge"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Alert, AlertDescription } from "@/components/ui/alert"
import type { GitHubAPI } from "@/lib/github-api"
import type { GeneratedTestCode, TestCaseSummary } from "@/lib/ai-service"
import { GitPullRequest, Loader2, CheckCircle, AlertCircle, FileText, ExternalLink } from "lucide-react"

interface PRCreatorProps {
  githubApi: GitHubAPI
  repository: { owner: string; name: string; full_name: string }
  testCases: GeneratedTestCode[]
  testSummaries: TestCaseSummary[]
  onBack: () => void
}

interface PRStatus {
  status: "idle" | "creating-branch" | "uploading-files" | "creating-pr" | "success" | "error"
  message: string
  prUrl?: string
  error?: string
}

export function PRCreator({ githubApi, repository, testCases, testSummaries, onBack }: PRCreatorProps) {
  const [prTitle, setPrTitle] = useState("Add AI-generated test cases")
  const [prDescription, setPrDescription] = useState("")
  const [branchName, setBranchName] = useState(`testgen-${Date.now()}`)
  const [baseBranch, setBaseBranch] = useState("main")
  const [selectedTests, setSelectedTests] = useState<Set<string>>(new Set(testCases.map((t) => t.id)))
  const [prStatus, setPrStatus] = useState<PRStatus>({ status: "idle", message: "" })
  const [testStructure, setTestStructure] = useState<"separate" | "grouped">("separate")

  const generatePRDescription = () => {
    const selectedTestCases = testCases.filter((test) => selectedTests.has(test.id))
    const summaryMap = new Map(testSummaries.map((s) => [s.id, s]))

    const testsByType = selectedTestCases.reduce(
      (acc, test) => {
        const summary = summaryMap.get(test.summaryId)
        const type = summary?.testType || "unit"
        if (!acc[type]) acc[type] = []
        acc[type].push(test)
        return acc
      },
      {} as Record<string, GeneratedTestCode[]>,
    )

    let description = "## AI-Generated Test Cases\n\n"
    description += "This PR adds comprehensive test cases generated by AI analysis of the codebase.\n\n"

    description += "### Test Summary\n"
    Object.entries(testsByType).forEach(([type, tests]) => {
      description += `- **${type.charAt(0).toUpperCase() + type.slice(1)} Tests**: ${tests.length} test${tests.length > 1 ? "s" : ""}\n`
    })

    description += "\n### Generated Test Files\n"
    selectedTestCases.forEach((test) => {
      const summary = summaryMap.get(test.summaryId)
      if (summary) {
        description += `- \`${getTestFileName(summary)}\` - ${summary.title}\n`
      }
    })

    description += "\n### Test Coverage\n"
    description += "These tests cover:\n"
    const uniqueFiles = new Set(testSummaries.filter((s) => selectedTests.has(s.id)).map((s) => s.filePath))
    uniqueFiles.forEach((filePath) => {
      description += `- \`${filePath}\`\n`
    })

    description += "\n---\n*Generated by TestGen AI*"

    setPrDescription(description)
  }

  const getTestFileName = (summary: TestCaseSummary): string => {
    const baseName =
      summary.filePath
        .split("/")
        .pop()
        ?.replace(/\.(ts|js|tsx|jsx)$/, "") || "test"
    const testType = summary.testType === "unit" ? "" : `.${summary.testType}`
    const extension = summary.filePath.endsWith(".ts") || summary.filePath.endsWith(".tsx") ? ".ts" : ".js"
    return `__tests__/${baseName}${testType}.test${extension}`
  }

  const organizeTestFiles = (): Record<string, string> => {
    const selectedTestCases = testCases.filter((test) => selectedTests.has(test.id))
    const summaryMap = new Map(testSummaries.map((s) => [s.id, s]))
    const files: Record<string, string> = {}

    if (testStructure === "separate") {
      // Create separate files for each test
      selectedTestCases.forEach((test) => {
        const summary = summaryMap.get(test.summaryId)
        if (summary) {
          const fileName = getTestFileName(summary)
          files[fileName] = test.code
        }
      })
    } else {
      // Group tests by source file
      const testsByFile = selectedTestCases.reduce(
        (acc, test) => {
          const summary = summaryMap.get(test.summaryId)
          if (summary) {
            const key = summary.filePath
            if (!acc[key]) acc[key] = []
            acc[key].push(test)
          }
          return acc
        },
        {} as Record<string, GeneratedTestCode[]>,
      )

      Object.entries(testsByFile).forEach(([filePath, tests]) => {
        const baseName =
          filePath
            .split("/")
            .pop()
            ?.replace(/\.(ts|js|tsx|jsx)$/, "") || "test"
        const extension = filePath.endsWith(".ts") || filePath.endsWith(".tsx") ? ".ts" : ".js"
        const fileName = `__tests__/${baseName}.test${extension}`

        const combinedCode = tests
          .map((test) => {
            const summary = summaryMap.get(test.summaryId)
            return `// ${summary?.title || "Test"}\n${test.code}`
          })
          .join("\n\n")

        files[fileName] = combinedCode
      })
    }

    return files
  }

  const createPullRequest = async () => {
    if (selectedTests.size === 0) return

    setPrStatus({ status: "creating-branch", message: "Creating branch..." })

    try {
      const { owner, name } = repository

      // Get default branch
      const defaultBranch = await githubApi.getDefaultBranch(owner, name)
      setBaseBranch(defaultBranch)

      // Create branch
      await githubApi.createBranch(owner, name, branchName, defaultBranch)

      setPrStatus({ status: "uploading-files", message: "Uploading test files..." })

      // Organize and upload test files
      const testFiles = organizeTestFiles()
      const fileEntries = Object.entries(testFiles)

      for (let i = 0; i < fileEntries.length; i++) {
        const [filePath, content] = fileEntries[i]
        setPrStatus({
          status: "uploading-files",
          message: `Uploading test files... (${i + 1}/${fileEntries.length})`,
        })

        await githubApi.createOrUpdateFile(owner, name, {
          path: filePath,
          content: content,
          message: `Add ${filePath.split("/").pop()}`,
          branch: branchName,
        })
      }

      setPrStatus({ status: "creating-pr", message: "Creating pull request..." })

      // Create pull request
      const pr = await githubApi.createPullRequest(owner, name, {
        title: prTitle,
        body: prDescription,
        head: branchName,
        base: defaultBranch,
      })

      setPrStatus({
        status: "success",
        message: "Pull request created successfully!",
        prUrl: pr.html_url,
      })
    } catch (error) {
      console.error("Error creating PR:", error)
      setPrStatus({
        status: "error",
        message: "Failed to create pull request",
        error: error instanceof Error ? error.message : "Unknown error",
      })
    }
  }

  const toggleTestSelection = (testId: string) => {
    const newSelection = new Set(selectedTests)
    if (newSelection.has(testId)) {
      newSelection.delete(testId)
    } else {
      newSelection.add(testId)
    }
    setSelectedTests(newSelection)
  }

  const selectAllTests = () => {
    setSelectedTests(new Set(testCases.map((t) => t.id)))
  }

  const clearAllTests = () => {
    setSelectedTests(new Set())
  }

  const selectedTestCases = testCases.filter((test) => selectedTests.has(test.id))
  const summaryMap = new Map(testSummaries.map((s) => [s.id, s]))

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">Create Pull Request</h2>
          <p className="text-muted-foreground">
            Create a PR with {testCases.length} generated test cases for {repository.full_name}
          </p>
        </div>
        <Button variant="outline" onClick={onBack}>
          Back
        </Button>
      </div>

      {/* Status Alert */}
      {prStatus.status !== "idle" && (
        <Alert
          className={
            prStatus.status === "error"
              ? "border-red-200 bg-red-50"
              : prStatus.status === "success"
                ? "border-green-200 bg-green-50"
                : ""
          }
        >
          <div className="flex items-center gap-2">
            {prStatus.status === "success" ? (
              <CheckCircle className="h-4 w-4 text-green-600" />
            ) : prStatus.status === "error" ? (
              <AlertCircle className="h-4 w-4 text-red-600" />
            ) : (
              <Loader2 className="h-4 w-4 animate-spin" />
            )}
            <AlertDescription>
              {prStatus.message}
              {prStatus.error && <div className="mt-1 text-sm text-red-600">{prStatus.error}</div>}
              {prStatus.prUrl && (
                <div className="mt-2">
                  <Button variant="outline" size="sm" asChild>
                    <a href={prStatus.prUrl} target="_blank" rel="noopener noreferrer">
                      <ExternalLink className="w-4 h-4 mr-2" />
                      View Pull Request
                    </a>
                  </Button>
                </div>
              )}
            </AlertDescription>
          </div>
        </Alert>
      )}

      <div className="grid lg:grid-cols-2 gap-6">
        {/* PR Configuration */}
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <GitPullRequest className="w-5 h-5" />
                Pull Request Details
              </CardTitle>
              <CardDescription>Configure your pull request settings</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="pr-title">Title</Label>
                <Input
                  id="pr-title"
                  value={prTitle}
                  onChange={(e) => setPrTitle(e.target.value)}
                  placeholder="Add AI-generated test cases"
                />
              </div>

              <div>
                <Label htmlFor="branch-name">Branch Name</Label>
                <Input
                  id="branch-name"
                  value={branchName}
                  onChange={(e) => setBranchName(e.target.value)}
                  placeholder="testgen-branch"
                />
              </div>

              <div>
                <Label htmlFor="test-structure">Test File Structure</Label>
                <Select
                  value={testStructure}
                  onValueChange={(value: "separate" | "grouped") => setTestStructure(value)}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="separate">Separate files per test</SelectItem>
                    <SelectItem value="grouped">Group by source file</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="pr-description">Description</Label>
                <Textarea
                  id="pr-description"
                  value={prDescription}
                  onChange={(e) => setPrDescription(e.target.value)}
                  rows={8}
                  placeholder="Describe the test cases being added..."
                />
                <Button variant="outline" size="sm" onClick={generatePRDescription} className="mt-2 bg-transparent">
                  Generate Description
                </Button>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>File Preview</CardTitle>
              <CardDescription>{Object.keys(organizeTestFiles()).length} test files will be created</CardDescription>
            </CardHeader>
            <CardContent>
              <ScrollArea className="h-48">
                <div className="space-y-2">
                  {Object.keys(organizeTestFiles()).map((fileName) => (
                    <div key={fileName} className="flex items-center gap-2 text-sm">
                      <FileText className="w-4 h-4 text-muted-foreground" />
                      <code className="bg-muted px-2 py-1 rounded text-xs">{fileName}</code>
                    </div>
                  ))}
                </div>
              </ScrollArea>
            </CardContent>
          </Card>
        </div>

        {/* Test Selection */}
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle>Select Test Cases</CardTitle>
                  <CardDescription>Choose which tests to include in the PR</CardDescription>
                </div>
                <div className="flex items-center gap-2">
                  <Button variant="outline" size="sm" onClick={selectAllTests}>
                    Select All
                  </Button>
                  <Button variant="outline" size="sm" onClick={clearAllTests}>
                    Clear All
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="text-sm text-muted-foreground mb-4">
                {selectedTests.size} of {testCases.length} tests selected
              </div>

              <ScrollArea className="h-96">
                <div className="space-y-3">
                  {testCases.map((test) => {
                    const summary = summaryMap.get(test.summaryId)
                    if (!summary) return null

                    return (
                      <div key={test.id} className="flex items-start gap-3 p-3 border rounded-lg">
                        <Checkbox
                          checked={selectedTests.has(test.id)}
                          onCheckedChange={() => toggleTestSelection(test.id)}
                          className="mt-1"
                        />
                        <div className="flex-1 space-y-2">
                          <div className="font-medium text-sm">{summary.title}</div>
                          <div className="text-xs text-muted-foreground">{summary.description}</div>
                          <div className="flex items-center gap-2">
                            <Badge variant="outline" className="text-xs">
                              {summary.testType}
                            </Badge>
                            <Badge variant="outline" className="text-xs">
                              {summary.priority}
                            </Badge>
                            <Badge variant="secondary" className="text-xs">
                              {test.framework}
                            </Badge>
                          </div>
                          <div className="text-xs text-muted-foreground">File: {summary.filePath}</div>
                        </div>
                      </div>
                    )
                  })}
                </div>
              </ScrollArea>
            </CardContent>
          </Card>

          <Button
            onClick={createPullRequest}
            disabled={selectedTests.size === 0 || prStatus.status !== "idle"}
            className="w-full"
            size="lg"
          >
            {prStatus.status !== "idle" ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                {prStatus.message}
              </>
            ) : (
              <>
                <GitPullRequest className="mr-2 h-4 w-4" />
                Create Pull Request ({selectedTests.size} tests)
              </>
            )}
          </Button>
        </div>
      </div>
    </div>
  )
}
